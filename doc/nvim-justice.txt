*nvim-justice.txt*            For Neovim           Last change: 2025 August 03

==============================================================================
Table of Contents                             *nvim-justice-table-of-contents*

1. nvim-justice                                   |nvim-justice-nvim-justice-|
  - Table of contents           |nvim-justice-nvim-justice--table-of-contents|
  - Features                             |nvim-justice-nvim-justice--features|
  - Installation                     |nvim-justice-nvim-justice--installation|
  - Configuration                   |nvim-justice-nvim-justice--configuration|
  - Usage                                   |nvim-justice-nvim-justice--usage|
  - Advanced usage                 |nvim-justice-nvim-justice--advanced-usage|
  - More just tooling for nvim|nvim-justice-nvim-justice--more-just-tooling-for-nvim|
  - About the author             |nvim-justice-nvim-justice--about-the-author|

==============================================================================
1. nvim-justice                                   *nvim-justice-nvim-justice-*



Justan integration of `just` <https://github.com/casey/just> in nvim.




TABLE OF CONTENTS               *nvim-justice-nvim-justice--table-of-contents*

- |nvim-justice-features|
- |nvim-justice-installation|
- |nvim-justice-configuration|
- |nvim-justice-usage|
- |nvim-justice-advanced-usage|
    - |nvim-justice-using-progress-bars-and-streaming-output|
- |nvim-justice-more-`just`-tooling-for-nvim|
- |nvim-justice-about-the-author|


FEATURES                                 *nvim-justice-nvim-justice--features*

- **Quick-select** recipes via keys shown at the left of the window. Running
    recipes thus requires only 2–3 keystrokes.
- As opposed to vim’s builtin `:make`, always runs **asynchronously**.
- **Modes** for running recipes:
    - **Default**results are shown in a notification window
    - **Quickfix**output is added to the quickfix list, using the
        |errorformat|
    - **Streaming**useful for example when the recipe has a progress bar
    - **Terminal**useful for example when the recipe prompts for further input
- Support for `just`’s run
    parameters <https://just.systems/man/en/recipe-parameters.html>. Parameters
    are read via `vim.ui.input`.
- Inspect recipes and variable values.
- Hide specific recipes, helpful to always exclude recipes that require user
    input.


INSTALLATION                         *nvim-justice-nvim-justice--installation*

**Requirements** - nvim 0.10+ - just <https://github.com/casey/just> -
_optional:_ snacks.nvim <http://github.com/folke/snacks.nvim> (for streaming
output) - _optional:_ `vim.ui.input` provider, such as snacks.nvim
<http://github.com/folke/snacks.nvim>, for nicer recipe parameter input -
_optional:_ Treesitter parser for syntax highlighting (`:TSInstall just`)

>lua
    -- lazy.nvim
    return { 
        "chrisgrieser/nvim-justice"
        -- optional, for streaming output and nicer parameter input
        -- dependencies = "folke/snacks.nvim",
    }
<


CONFIGURATION                       *nvim-justice-nvim-justice--configuration*

The `setup` call is optional.

>lua
    -- default settings
    require("justice").setup {
        -- Defines how recipe modes are determined. For example, if a recipe has
        -- "download" in the name, or if it has "streaming" or "curl" in the comment,
        -- it will be considered a "streaming" recipe.
        -- (strings are interpreted as lua patterns, thus `-` needs to be escaped as `%-`)
        recipeModes = {
            streaming = { -- useful for progress bars (requires `snacks.nvim`)
                name = { "download" },
                comment = { "streaming", "curl" }, -- comment contains "streaming" or "curl"
            },
            terminal = { -- useful for recipes with input
                name = {},
                comment = { "input", "terminal", "fzf" },
            },
            quickfix = {
                name = { "%-qf$" }, -- name ending with "-qf"
                comment = { "quickfix" },
            },
            ignore = { -- hides them from the nvim-justice selection window
                name = {},
                comment = {},
            },
        },
        window = {
            border = getBorder(), -- `vim.o.winborder` on nvim 0.11, otherwise "rounded"
            recipeCommentMaxLen = 35,
            keymaps = {
                next = "<Tab>",
                prev = "<S-Tab>",
                runRecipeUnderCursor = "<CR>",
                runFirstRecipe = "1",
                closeWin = { "q", "<Esc>" },
                showRecipe = "<Space>",
                showVariables = "?",
                dontUseForQuickKey = { "j", "k", "-", "_" },
            },
            highlightGroups = {
                quickKey = "Keyword",
                icons = "Function",
            },
            icons = {
                just = "󰖷",
                streaming = "ﲋ",
                quickfix = "",
                terminal = "",
                ignore = "󰈉",
                recipeParameters = "󰘎",
            },
        },
        terminal = {
            height = 10,
        },
    }
<


USAGE                                       *nvim-justice-nvim-justice--usage*

>lua
    require("justice").select()
<

>vim
    :Justice
<

**Recipe parameters** If the recipe expects parameters from the command line
<https://just.systems/man/en/recipe-parameters.html>, `nvim-justice` will
automatically prompt for them.

If a parameter default has been defined, confirm the prompt with an empty value
to use the default.

**Keymaps in the selection window** - Navigate the window via `<Tab>` &
`<S-Tab>`. - Run selected recipe with `<CR>`. - **Quick-select** recipes via
the highlighted keys. - Run the first recipe via `1`. - Inspect recipe via
`<Space>`. - Show variable values via `?`.

**Use with a specific Justfile (--justfile)**

>lua
    require("justice").select({
        justfile = "path/to/custom/justfile", -- passed to `--justfile=`
    })
<


ADVANCED USAGE                     *nvim-justice-nvim-justice--advanced-usage*


USING PROGRESS BARS AND STREAMING OUTPUT ~

Here is an example of a `just` recipe that displays a simple progress bar

This kind of progress bar works the same when triggered in the terminal via
`just demo-progressbar` or via `nivm-justice`.

>just
    # `opts.recipes.streaming.comment` is configured to make recipes whose comment
    # contains "streaming" stream the output
    
    # streaming
    demo-progressbar:
        #!/usr/bin/env zsh
        char="+"
        progress=""
        for i in {1..20}; do
            progress="$progress$char"
            printf "\33[2K\r" # `\33[2K` fully erase the line, `\r` moves to start of line
            printf "$progress" # printf (or `echo -n`) needed to not create a newline
            sleep 0.1
        done
        printf "\33[2K\r"
        echo "Done."
<

Note that the following version of a progress bar works in the terminal, but
not work in `nvim-justice`, since the plugin prints every unit of data
individually.

>just
    # streaming
    progressbar_not_working_in_nvim_justice:
        #!/usr/bin/env zsh
        char="+"
        for i in {1..20}; do
            printf "$char"
            sleep 0.1
        done
        printf "\33[2K\r"
        echo "Done."
<


MORE JUST TOOLING FOR NVIM*nvim-justice-nvim-justice--more-just-tooling-for-nvim*

- Just-LSP <https://github.com/terror/just-lsp>
- Treesitter parser for
    Just <https://github.com/IndianBoy42/tree-sitter-just> (`:TSInstall just`)


ABOUT THE AUTHOR                 *nvim-justice-nvim-justice--about-the-author*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

- Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
